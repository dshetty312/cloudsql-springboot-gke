#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.hibernate.ddl-auto=none
#spring.jpa.hibernate.show-sql=true
##spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
##spring.datasource.url=jdbc:postgresql://35.227.66.225:5432/dikshith-test
##gcp cloud sql properties
#spring.cloud.gcp.projectId=gcp-dataproc-dikshith
#spring.cloud.gcp.sql.instanceName=gcp-dataproc-dikshith:us-east1:test-postgres
#spring.cloud.gcp.sql.databaseName=postgres
#spring.cloud.gcp.sql.userName=postgres
#spring.cloud.gcp.sql.password=postgres
##spring.datasource.username=postgres
##spring.datasource.password=postgres
#
#
#spring.datasource.initialization-mode=always
#spring.datasource.initialize=true
#spring.datasource.schema=classpath:/schema.sql
#spring.datasource.continue-on-error=true

# Set to the Postgres user you want to connect to; 'postgres' is the default user.
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.cloud.gcp.sql.database-name=postgres
# This value is formatted in the form: [gcp-project-id]:[region]:[instance-name]
spring.cloud.gcp.sql.instance-connection-name=gcp-dataproc-dikshith:us-east1:test-postgres
# So app starts despite "table already exists" errors.
spring.datasource.continue-on-error=true
# Enforces database initialization
spring.datasource.initialization-mode=always
spring.cloud.gcp.project-id=gcp-dataproc-dikshith
spring.cloud.gcp.credentials.location=classpath:/gcp-dataproc-dikshith-47eff1bc9e85.json